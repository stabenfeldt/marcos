require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ServicesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # BikeBikeService. As you add validations to BikeBikeService, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        description: "Must fix the quirking",
        log:         "I oiled it",
        "due_date(3i)"=>"19",
        "due_date(2i)"=>"4",
        "due_date(1i)"=>"2017",
        "due_date(4i)"=>"20",
        "due_date(5i)"=>"34"
    }
  }



  let(:invalid_attributes) {
    {
      log:         "I oiled it",
      due_date:    "2015-11-12"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ServiceController. Be sure to keep this updated too.
  let(:valid_session) { {} }
   before :each do
      @user = Fabricate(:user)
      @bike = Fabricate(:bike, user: @user)
      @part = Fabricate(:part, kind: 'cassette', brand: 'generic')
      @bike.parts << @part
      @bike.save
      @bike_part = @bike.parts.first
      puts "bike_part id is #{@bike_part.id}"
    end

  describe "GET index" do
    it "assigns all bike_bike_services as @bike_bike_services" do
      bike_bike_service = BikeBikeService.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:bike_bike_services)).to eq([bike_bike_service])
    end
  end

  describe "GET show" do
    it "assigns the requested bike_service as @bike_service" do
      bike_service = BikeService.create! valid_attributes
      get :show, {:id => bike_service.to_param, bike_part_id: bp.id}, valid_session
      expect(assigns(:bike_service)).to eq(bike_service)
    end
  end

  describe "GET new" do

    it "bike_services are based on a @bike_service, which holds many bike parts" do
      get :new, {bike_id: @bike.id, bike_part_id: @bike_part.id}, valid_session
      expect(assigns(:bike_service)).to be_a_new(BikeService)
    end
  end

  describe "GET edit" do
    it "assigns the requested bike_service as @bike_service" do
      bike_service = BikeService.create! valid_attributes
      get :edit, {:id => bike_service.to_param}, valid_session
      expect(assigns(:bike_service)).to eq(bike_service)
    end
  end

  describe "POST create"do
    describe "with valid params", focus: true  do
      it "creates a new BikeService" do
        expect {
          post :create, { bike_id: @bike.id, bike_service: valid_attributes,
                          bike_part_id: [@bike_part.id],
                          bike_service_description: ['fix chain', 'fix headset'],
                        },
             valid_session }.to change(BikeService, :count).by(1)
      end

      it "assigns a newly created bike_service as @bike_service" do
        post :create, {bike_id: @bike.id, :bike_service => valid_attributes,
              bike_part_id: [@bike_part.id]}, valid_session
        expect(assigns(:bike_service)).to be_a(BikeService)
        expect(assigns(:bike_service)).to be_persisted
      end

      it "redirects to the created bike_service" do
        post :create, {bike_id: @bike.id, :bike_service => valid_attributes,
                       :bike_part_id => @bike_part.id}, valid_session
        expect(response).to redirect_to([@bike.user, @bike])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved bike_service as @bike_service" do
        post :create, {:bike_service => invalid_attributes}, valid_session
        expect(assigns(:bike_service)).to be_a_new(BikeService)
      end

      it "re-renders the 'new' template" do
        post :create, {:bike_service => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested bike_service" do
        bike_service = BikeService.create! valid_attributes
        put :update, {:id => bike_service.to_param, :bike_service => new_attributes}, valid_session
        bike_service.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested bike_service as @bike_service" do
        bike_service = BikeService.create! valid_attributes
        put :update, {:id => bike_service.to_param, :bike_service => valid_attributes}, valid_session
        expect(assigns(:bike_service)).to eq(bike_service)
      end

      it "redirects to the bike_service" do
        bike_service = BikeService.create! valid_attributes
        put :update, {:id => bike_service.to_param, :bike_service => valid_attributes}, valid_session
        expect(response).to redirect_to(bike_service)
      end
    end

    describe "with invalid params" do
      it "assigns the bike_service as @bike_service" do
        bike_service = BikeService.create! valid_attributes
        put :update, {:id => bike_service.to_param, :bike_service => invalid_attributes}, valid_session
        expect(assigns(:bike_service)).to eq(bike_service)
      end

      it "re-renders the 'edit' template" do
        bike_service = BikeService.create! valid_attributes
        put :update, {:id => bike_service.to_param, :bike_service => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested bike_service" do
      bike_service = BikeService.create! valid_attributes
      expect {
        delete :destroy, {:id => bike_service.to_param}, valid_session
      }.to change(BikeService, :count).by(-1)
    end

    it "redirects to the bike_services list" do
      bike_service = BikeService.create! valid_attributes
      delete :destroy, {:id => bike_service.to_param}, valid_session
      expect(response).to redirect_to(bike_services_url)
    end
  end

end
